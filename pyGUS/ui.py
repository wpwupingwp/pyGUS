#! /usr/bin/python3

# Raw code was generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jul 26, 2022 04:34:12 PM CST  platform: Darwin

import queue
import tkinter as tk
import tkinter.ttk as ttk
import logging
from logging import handlers

from global_vars import log

FMT = '%(asctime)s %(levelname)-8s %(message)s'
DATEFMT = '%H:%M:%S'


class Root:
    def __init__(self, top=None):
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'

        top.geometry("280x300+2243+223")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("pyGUS")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.321, rely=0.1, height=40, width=100)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=run_mode1)
        self.Button1.configure(compound='left')
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(text='''Mode 1''')
        self.tooltip_font = "TkDefaultFont"
        self.Button1_tooltip = ToolTip(self.Button1, self.tooltip_font,
                                       'Single target in each image')

        self.Button1_1 = tk.Button(self.top)
        self.Button1_1.place(relx=0.321, rely=0.25, height=40, width=100)
        self.Button1_1.configure(activebackground="beige")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#edf0f3")
        self.Button1_1.configure(command=run_mode2)
        self.Button1_1.configure(compound='left')
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#edf0f3")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(text='''Mode 2''')
        self.tooltip_font = "TkDefaultFont"
        self.Button1_1_tooltip = ToolTip(
            self.Button1_1, self.tooltip_font,
            'Target and positive reference in each image')

        self.Button1_1_1 = tk.Button(self.top)
        self.Button1_1_1.place(relx=0.321, rely=0.4, height=40, width=100)
        self.Button1_1_1.configure(activebackground="beige")
        self.Button1_1_1.configure(activeforeground="#000000")
        self.Button1_1_1.configure(background="#edf0f3")
        self.Button1_1_1.configure(command=run_mode3)
        self.Button1_1_1.configure(compound='left')
        self.Button1_1_1.configure(foreground="#000000")
        self.Button1_1_1.configure(highlightbackground="#edf0f3")
        self.Button1_1_1.configure(highlightcolor="black")
        self.Button1_1_1.configure(text='''Mode 3''')
        self.tooltip_font = "TkDefaultFont"
        self.Button1_1_1_tooltip = ToolTip(
            self.Button1_1_1, self.tooltip_font,
            'Target and color checker in each image')

        self.Button1_1_1_1 = tk.Button(self.top)
        self.Button1_1_1_1.place(relx=0.321, rely=0.55, height=40, width=100)
        self.Button1_1_1_1.configure(activebackground="beige")
        self.Button1_1_1_1.configure(activeforeground="#000000")
        self.Button1_1_1_1.configure(background="#edf0f3")
        self.Button1_1_1_1.configure(command=run_mode4)
        self.Button1_1_1_1.configure(compound='left')
        self.Button1_1_1_1.configure(foreground="#000000")
        self.Button1_1_1_1.configure(highlightbackground="#edf0f3")
        self.Button1_1_1_1.configure(highlightcolor="black")
        self.Button1_1_1_1.configure(text='''Mode 4''')
        self.tooltip_font = "TkDefaultFont"
        self.Button1_1_1_1_tooltip = ToolTip(
            self.Button1_1_1_1, self.tooltip_font, 'Manually select')

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.107, rely=0.75, height=30, width=100)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(command=checker)
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(text='''Color checker''')
        self.tooltip_font = "TkDefaultFont"
        self.Button2_tooltip = ToolTip(
            self.Button2, self.tooltip_font,
            'Macbeth color checker for print')

        self.b_help = tk.Button(self.top)
        self.b_help.place(relx=0.536, rely=0.75, height=30, width=100)
        self.b_help.configure(activebackground="beige")
        self.b_help.configure(activeforeground="#000000")
        self.b_help.configure(background="#edf0f3")
        self.b_help.configure(command=help)
        self.b_help.configure(compound='left')
        self.b_help.configure(foreground="#000000")
        self.b_help.configure(highlightbackground="#edf0f3")
        self.b_help.configure(highlightcolor="black")
        self.b_help.configure(text='''Help''')


class RootMode1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'

        top.geometry("500x280+2597+46")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("Mode 1")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.ref1 = tk.StringVar()
        self.ref2 = tk.StringVar()
        self.images = tk.StringVar()
        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.04, rely=0.071, relheight=0.143,
                          relwidth=0.912)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#edf0f3")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.022, rely=0.25, height=22, width=160)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Negative reference image''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=self.ref1)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=open_file('Negative reference image',
                                                 self.Entry1))
        self.Button1.configure(compound='left')
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(text='''Open''')

        self.Frame1_1 = tk.Frame(self.top)
        self.Frame1_1.place(relx=0.04, rely=0.286, relheight=0.143
                            , relwidth=0.912)
        self.Frame1_1.configure(relief='groove')
        self.Frame1_1.configure(borderwidth="2")
        self.Frame1_1.configure(relief="groove")
        self.Frame1_1.configure(background="#edf0f3")
        self.Frame1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1.configure(highlightcolor="black")

        self.Label1_1 = tk.Label(self.Frame1_1)
        self.Label1_1.place(relx=0.022, rely=0.25, height=22, width=160)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(background="#edf0f3")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Positive reference image''')

        self.Entry1_1 = tk.Entry(self.Frame1_1)
        self.Entry1_1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(foreground="#000000")
        self.Entry1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1.configure(highlightcolor="black")
        self.Entry1_1.configure(insertbackground="black")
        self.Entry1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1.configure(selectforeground="black")
        self.Entry1_1.configure(textvariable=self.ref2)

        self.Button1_2 = tk.Button(self.Frame1_1)
        self.Button1_2.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2.configure(activebackground="beige")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#edf0f3")
        self.Button1_2.configure(command=open_file('Positive reference image',
                                                   self.Entry1_1))
        self.Button1_2.configure(compound='left')
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#edf0f3")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(text='''Open''')

        self.Frame1_1_1 = tk.Frame(self.top)
        self.Frame1_1_1.place(relx=0.04, rely=0.5, relheight=0.143
                              , relwidth=0.912)
        self.Frame1_1_1.configure(relief='groove')
        self.Frame1_1_1.configure(borderwidth="2")
        self.Frame1_1_1.configure(relief="groove")
        self.Frame1_1_1.configure(background="#edf0f3")
        self.Frame1_1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1_1.configure(highlightcolor="black")

        self.Label1_1_1 = tk.Label(self.Frame1_1_1)
        self.Label1_1_1.place(relx=0.158, rely=0.25, height=22, width=90)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#edf0f3")
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(text='''Target images''')

        self.Entry1_1_1 = tk.Entry(self.Frame1_1_1)
        self.Entry1_1_1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1_1_1.configure(background="white")
        self.Entry1_1_1.configure(font="TkFixedFont")
        self.Entry1_1_1.configure(foreground="#000000")
        self.Entry1_1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1_1.configure(highlightcolor="black")
        self.Entry1_1_1.configure(insertbackground="black")
        self.Entry1_1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1_1.configure(selectforeground="black")
        self.Entry1_1_1.configure(textvariable=self.images)

        self.Button1_2_1 = tk.Button(self.Frame1_1_1)
        self.Button1_2_1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2_1.configure(activebackground="beige")
        self.Button1_2_1.configure(activeforeground="#000000")
        self.Button1_2_1.configure(background="#edf0f3")
        self.Button1_2_1.configure(command=open_file(
            'Target images', self.Entry1_1_1, single=False))
        self.Button1_2_1.configure(compound='left')
        self.Button1_2_1.configure(foreground="#000000")
        self.Button1_2_1.configure(highlightbackground="#edf0f3")
        self.Button1_2_1.configure(highlightcolor="black")
        self.Button1_2_1.configure(text='''Open''')

        self.che48 = tk.IntVar()
        self.Checkbutton1 = tk.Checkbutton(self.top)
        # hide, not implemented
        # self.Checkbutton1.place(relx=0.04, rely=0.75, relheight=0.079,
        #                         relwidth=0.44)
        self.Checkbutton1.configure(activebackground="beige")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#edf0f3")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#edf0f3")
        self.Checkbutton1.configure(text='''Automatic adjust white balance''')
        self.Checkbutton1.configure(variable=self.che48)

        self.Button2 = tk.Button(self.top)
        # self.Button2.place(relx=0.58, rely=0.732, height=38, width=107)
        self.Button2.place(relx=0.38, rely=0.732, height=40, width=100)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(command=run(
            mode=1, ref1=self.ref1, ref2=self.ref2,
            images=self.images))
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(text='''Run''')


class RootMode2:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'

        top.geometry("500x200+2630+378")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("Mode 2")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.ref1 = tk.StringVar()
        self.images = tk.StringVar()

        self.Frame1_2 = tk.Frame(self.top)
        self.Frame1_2.place(relx=0.04, rely=0.1, relheight=0.2, relwidth=0.92)
        self.Frame1_2.configure(relief='groove')
        self.Frame1_2.configure(borderwidth="2")
        self.Frame1_2.configure(relief="groove")
        self.Frame1_2.configure(background="#edf0f3")
        self.Frame1_2.configure(highlightbackground="#d9d9d9")
        self.Frame1_2.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1_2)
        self.Label1.place(relx=0.133, rely=0.25, height=22, width=111)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Reference image''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_tooltip = ToolTip(self.Label1, self.tooltip_font,
                                      'Left negative, right positive')

        self.Entry1 = tk.Entry(self.Frame1_2)
        self.Entry1.place(relx=0.396, rely=0.125, height=30, relwidth=0.435)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=self.ref1)

        self.Button1 = tk.Button(self.Frame1_2)
        self.Button1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=open_file(
            'Left negative reference, right positive reference', self.Entry1))
        self.Button1.configure(compound='left')
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(text='''Open''')

        self.Frame1_1_1_1 = tk.Frame(self.top)
        self.Frame1_1_1_1.place(relx=0.04, rely=0.4, relheight=0.2
                                , relwidth=0.92)
        self.Frame1_1_1_1.configure(relief='groove')
        self.Frame1_1_1_1.configure(borderwidth="2")
        self.Frame1_1_1_1.configure(relief="groove")
        self.Frame1_1_1_1.configure(background="#edf0f3")
        self.Frame1_1_1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1_1_1.configure(highlightcolor="black")

        self.Label1_1_1 = tk.Label(self.Frame1_1_1_1)
        self.Label1_1_1.place(relx=0.154, rely=0.25, height=22, width=90)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#edf0f3")
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(text='''Target images''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_1_1_tooltip = ToolTip(
            self.Label1_1_1, self.tooltip_font,
            'Left target, right positive reference')

        self.Entry2 = tk.Entry(self.Frame1_1_1_1)
        self.Entry2.place(relx=0.396, rely=0.125, height=30, relwidth=0.435)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(textvariable=self.images)

        self.Button1_2_1 = tk.Button(self.Frame1_1_1_1)
        self.Button1_2_1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2_1.configure(activebackground="beige")
        self.Button1_2_1.configure(activeforeground="#000000")
        self.Button1_2_1.configure(background="#edf0f3")
        self.Button1_2_1.configure(command=open_file(
            'Target images', self.Entry2, single=False))
        self.Button1_2_1.configure(compound='left')
        self.Button1_2_1.configure(foreground="#000000")
        self.Button1_2_1.configure(highlightbackground="#edf0f3")
        self.Button1_2_1.configure(highlightcolor="black")
        self.Button1_2_1.configure(text='''Open''')

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.38, rely=0.7, height=40, width=100)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(command=run(mode=2, ref1=self.ref1,
                                           images=self.images))
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(text='''Run''')


class root_mode3:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'

        top.geometry("500x280+2639+615")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("Mode 3")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.ref1 = tk.StringVar()
        self.ref2 = tk.StringVar()
        self.targets = tk.StringVar()

        self.Frame1_3 = tk.Frame(self.top)
        self.Frame1_3.place(relx=0.04, rely=0.071, relheight=0.143
                            , relwidth=0.912)
        self.Frame1_3.configure(relief='groove')
        self.Frame1_3.configure(borderwidth="2")
        self.Frame1_3.configure(relief="groove")
        self.Frame1_3.configure(background="#edf0f3")
        self.Frame1_3.configure(highlightbackground="#d9d9d9")
        self.Frame1_3.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1_3)
        self.Label1.place(relx=0.022, rely=0.25, height=22, width=160)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Negative reference image''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_tooltip = \
            ToolTip(self.Label1, self.tooltip_font,
                    '''Left negative reference, right color checker''')

        self.Entry1 = tk.Entry(self.Frame1_3)
        self.Entry1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=self.ref1)

        self.Button1 = tk.Button(self.Frame1_3)
        self.Button1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(text='''Open''')

        self.Frame1_1_2 = tk.Frame(self.top)
        self.Frame1_1_2.place(relx=0.04, rely=0.321, relheight=0.143
                              , relwidth=0.912)
        self.Frame1_1_2.configure(relief='groove')
        self.Frame1_1_2.configure(borderwidth="2")
        self.Frame1_1_2.configure(relief="groove")
        self.Frame1_1_2.configure(background="#edf0f3")
        self.Frame1_1_2.configure(highlightbackground="#d9d9d9")
        self.Frame1_1_2.configure(highlightcolor="black")

        self.Label1_1 = tk.Label(self.Frame1_1_2)
        self.Label1_1.place(relx=0.022, rely=0.25, height=22, width=160)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(background="#edf0f3")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Positive reference image''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_1_tooltip = \
            ToolTip(self.Label1_1, self.tooltip_font,
                    '''Left positive reference, right color checker''')

        self.Button1_2 = tk.Button(self.Frame1_1_2)
        self.Button1_2.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2.configure(activebackground="beige")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#edf0f3")
        self.Button1_2.configure(command=open_file)
        self.Button1_2.configure(compound='left')
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#edf0f3")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(text='''Open''')

        self.Entry1_1 = tk.Entry(self.Frame1_1_2)
        self.Entry1_1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(foreground="#000000")
        self.Entry1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1.configure(highlightcolor="black")
        self.Entry1_1.configure(insertbackground="black")
        self.Entry1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1.configure(selectforeground="black")
        self.Entry1_1.configure(textvariable=self.ref2)

        self.Frame1_1_1_2 = tk.Frame(self.top)
        self.Frame1_1_1_2.place(relx=0.04, rely=0.571, relheight=0.143
                                , relwidth=0.912)
        self.Frame1_1_1_2.configure(relief='groove')
        self.Frame1_1_1_2.configure(borderwidth="2")
        self.Frame1_1_1_2.configure(relief="groove")
        self.Frame1_1_1_2.configure(background="#edf0f3")
        self.Frame1_1_1_2.configure(highlightbackground="#d9d9d9")
        self.Frame1_1_1_2.configure(highlightcolor="black")

        self.Label1_1_1 = tk.Label(self.Frame1_1_1_2)
        self.Label1_1_1.place(relx=0.158, rely=0.25, height=22, width=90)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#edf0f3")
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(text='''Target images''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_1_1_tooltip = \
            ToolTip(self.Label1_1_1, self.tooltip_font,
                    '''Left target, right color checker''')

        self.Button1_2_1 = tk.Button(self.Frame1_1_1_2)
        self.Button1_2_1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2_1.configure(activebackground="beige")
        self.Button1_2_1.configure(activeforeground="#000000")
        self.Button1_2_1.configure(background="#edf0f3")
        self.Button1_2_1.configure(command=open_file)
        self.Button1_2_1.configure(compound='left')
        self.Button1_2_1.configure(foreground="#000000")
        self.Button1_2_1.configure(highlightbackground="#edf0f3")
        self.Button1_2_1.configure(highlightcolor="black")
        self.Button1_2_1.configure(text='''Open''')

        self.Entry1_1_1 = tk.Entry(self.Frame1_1_1_2)
        self.Entry1_1_1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1_1_1.configure(background="white")
        self.Entry1_1_1.configure(font="TkFixedFont")
        self.Entry1_1_1.configure(foreground="#000000")
        self.Entry1_1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1_1.configure(highlightcolor="black")
        self.Entry1_1_1.configure(insertbackground="black")
        self.Entry1_1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1_1.configure(selectforeground="black")
        self.Entry1_1_1.configure(textvariable=self.targets)

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.38, rely=0.786, height=40, width=100)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(command=run_mode3)
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(text='''Run''')


class root_1_1_1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'

        top.geometry("500x120+2138+702")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("Mode 4")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.targets = tk.StringVar()

        self.Frame1_1_1_1_1 = tk.Frame(self.top)
        self.Frame1_1_1_1_1.place(relx=0.04, rely=0.167, relheight=0.333
                                  , relwidth=0.912)
        self.Frame1_1_1_1_1.configure(relief='groove')
        self.Frame1_1_1_1_1.configure(borderwidth="2")
        self.Frame1_1_1_1_1.configure(relief="groove")
        self.Frame1_1_1_1_1.configure(background="#edf0f3")
        self.Frame1_1_1_1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1_1_1_1.configure(highlightcolor="black")

        self.Label1_1_1 = tk.Label(self.Frame1_1_1_1_1)
        self.Label1_1_1.place(relx=0.154, rely=0.25, height=22, width=90)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#edf0f3")
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(foreground="#000000")
        self.Label1_1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1_1.configure(highlightcolor="black")
        self.Label1_1_1.configure(text='''Target images''')
        self.tooltip_font = "TkDefaultFont"
        self.Label1_1_1_tooltip = \
            ToolTip(self.Label1_1_1, self.tooltip_font,
                    '''Left target, right positive reference''')

        self.Button1_2_1 = tk.Button(self.Frame1_1_1_1_1)
        self.Button1_2_1.place(relx=0.833, rely=0.125, height=30, width=70)
        self.Button1_2_1.configure(activebackground="beige")
        self.Button1_2_1.configure(activeforeground="#000000")
        self.Button1_2_1.configure(background="#edf0f3")
        self.Button1_2_1.configure(command=open_file)
        self.Button1_2_1.configure(compound='left')
        self.Button1_2_1.configure(foreground="#000000")
        self.Button1_2_1.configure(highlightbackground="#edf0f3")
        self.Button1_2_1.configure(highlightcolor="black")
        self.Button1_2_1.configure(text='''Open''')

        self.Entry1_1_1 = tk.Entry(self.Frame1_1_1_1_1)
        self.Entry1_1_1.place(relx=0.395, rely=0.125, height=30, relwidth=0.439)
        self.Entry1_1_1.configure(background="white")
        self.Entry1_1_1.configure(font="TkFixedFont")
        self.Entry1_1_1.configure(foreground="#000000")
        self.Entry1_1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1_1.configure(highlightcolor="black")
        self.Entry1_1_1.configure(insertbackground="black")
        self.Entry1_1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1_1.configure(selectforeground="black")
        self.Entry1_1_1.configure(textvariable=self.targets)

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.4, rely=0.583, height=40, width=100)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(command=run_mode2)
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(text='''Run''')


class root_log:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
        _ana2color = 'beige'  # X11 color: #f5f5dc
        _tabfg1 = 'black'
        _tabfg2 = 'black'
        _tabbg1 = 'grey75'
        _tabbg2 = 'grey89'
        _bgmode = 'light'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("500x200+2225+402")
        top.minsize(72, 15)
        top.maxsize(3648, 1089)
        top.resizable(1, 1)
        top.title("Mode 2")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        def poll():
            while True:
                try:
                    msg = log_queue.get(block=False)
                    level = msg.levelname
                    msg = formatter.format(msg) + '\n'
                    self.Scrolledtext1.insert('end', msg, level)
                    self.Scrolledtext1.yview('end')
                except queue.Empty:
                    break
            # to avoid orphan poll()
            if log.hasHandlers():
                self.Scrolledtext1.after(10, poll)
            else:
                return

        self.top = top
        # clean old handlers
        for i in log.handlers:
            log.removeHandler(i)
        log_queue = queue.Queue()
        formatter = logging.Formatter(fmt=FMT, datefmt=DATEFMT)
        # do not add formatter to queuehandler, or msg will be formatted twice
        queue_handler = handlers.QueueHandler(log_queue)
        # give poll() time to quit
        _w1.after(100, log.addHandler(queue_handler))
        self.Scrolledtext1 = ScrolledText(self.top)
        self.Scrolledtext1.place(relx=0.0, rely=0.0, relheight=1.0,
                                 relwidth=1.0)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#edf0f3")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")
        self.Scrolledtext1.tag_config('INFO', foreground='black')
        self.Scrolledtext1.tag_config('WARNING', foreground='orange')
        self.Scrolledtext1.tag_config('ERROR', foreground='red')
        self.Scrolledtext1.tag_config('CRITICAL', foreground='red')
        self.Scrolledtext1.tag_config('EXCEPTION', foreground='red')
        self.Scrolledtext1.pack(fill='both')
        self.Scrolledtext1.after(0, poll)


# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time


class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        self.msgVar.set(msg)


#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>',
                       lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')




#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jul 26, 2022 04:34:12 PM CST  platform: Darwin

import sys
import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext


def open_file(title, entry, single=True):
    def func():
        if single:
            a = filedialog.askopenfilename(title=title)
        else:
            a = filedialog.askopenfilenames(title=title)
        entry.delete(0, 'end')
        entry.insert(0, a)
    return func


def checker():
    pass


def help():
    pass


def run_mode1():
    global _top2, _w2
    _top2 = tk.Toplevel(root)
    _w2 = RootMode1(_top2)

def run_mode2():
    global _top3, _w3
    _top3 = tk.Toplevel(root)
    _w3 = RootMode2(_top3)


def run_mode3():
    # Creates a toplevel widget.
    global _top4, _w4
    _top4 = tk.Toplevel(root)
    _w4 = root_mode3(_top4)


def run_mode4():
    global _top5, _w5
    _top5 = tk.Toplevel(root)
    _w5 = root_1_1_1(_top5)


def run(mode, ref1=None, ref2=None, images=None):
    # call core
    def call():
        s_list = ['', '', '']
        for index, entry in enumerate([ref1, ref2, images]):
            if entry is not None:
                if entry.get() == '':
                    messagebox.showerror(message='Empty input!')
                    return
                else:
                    s_list[index] = entry.get()

        cmd = (f'-mode {mode} -ref1 {s_list[0]} -ref2 {s_list[1]} '
               f'-targets {s_list[2]}')
        messagebox.showinfo(message=cmd)
    return call


def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = Root(_top1)
    root.mainloop()


if __name__ == '__main__':
    main()
